{"ast":null,"code":"import React,{useState,useMemo,useEffect}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const RootConnectorExercise=_ref=>{let{currentLesson}=_ref;// 1. Encontra todas as raízes únicas e não nulas e as armazena.\nconst uniqueRoots=useMemo(()=>{if(!currentLesson||!currentLesson.palavras)return[];const roots=currentLesson.palavras.map(p=>p.raiz_shoresh).filter(r=>r);// Filtra raízes nulas ou vazias\nreturn[...new Set(roots)];// Cria um array de raízes únicas\n},[currentLesson]);// 2. Gerencia o estado do desafio atual.\nconst[currentRootIndex,setCurrentRootIndex]=useState(0);const[wordStatuses,setWordStatuses]=useState({});const[correctlyGuessed,setCorrectlyGuessed]=useState(new Set());const targetRoot=uniqueRoots[currentRootIndex];const totalWordsForThisRoot=useMemo(()=>currentLesson.palavras.filter(p=>p.raiz_shoresh===targetRoot).length,[targetRoot,currentLesson.palavras]);// Reseta o estado quando a raiz alvo muda.\nuseEffect(()=>{setWordStatuses({});setCorrectlyGuessed(new Set());},[currentRootIndex]);const handleWordClick=palavra=>{// Não faz nada se a palavra já foi marcada.\nif(wordStatuses[palavra.palavra_hebraica])return;const isCorrect=palavra.raiz_shoresh===targetRoot;const status=isCorrect?'correct':'incorrect';setWordStatuses(prev=>({...prev,[palavra.palavra_hebraica]:status}));if(isCorrect){setCorrectlyGuessed(prev=>new Set(prev).add(palavra.palavra_hebraica));}};const handleNextRoot=()=>{if(currentRootIndex<uniqueRoots.length-1){setCurrentRootIndex(prevIndex=>prevIndex+1);}};const isChallengeComplete=correctlyGuessed.size===totalWordsForThisRoot;const areAllChallengesDone=currentRootIndex>=uniqueRoots.length-1&&isChallengeComplete;if(uniqueRoots.length===0){return/*#__PURE__*/_jsx(\"p\",{children:\"N\\xE3o h\\xE1 ra\\xEDzes para este exerc\\xEDcio.\"});}// 6. Tela de conclusão.\nif(areAllChallengesDone){return/*#__PURE__*/_jsxs(\"div\",{style:{padding:'20px',textAlign:'center'},children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Parab\\xE9ns!\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Voc\\xEA completou todos os desafios de conex\\xE3o de raiz.\"})]});}return/*#__PURE__*/_jsxs(\"div\",{style:{padding:'20px',border:'1px solid #eee',borderRadius:'8px'},children:[/*#__PURE__*/_jsxs(\"h3\",{style:{textAlign:'center',marginBottom:'25px'},children:[\"Exerc\\xEDcio: Conecte as Palavras (\",currentRootIndex+1,\"/\",uniqueRoots.length,\")\"]}),/*#__PURE__*/_jsxs(\"p\",{style:{textAlign:'center',fontSize:'1.2em'},children:[\"Clique nas palavras que pertencem \\xE0 raiz: \",/*#__PURE__*/_jsx(\"strong\",{style:{fontSize:'1.5em',color:'#005a9e'},children:targetRoot})]}),/*#__PURE__*/_jsx(\"div\",{style:{display:'grid',gridTemplateColumns:'repeat(auto-fill, minmax(100px, 1fr))',gap:'15px',marginTop:'20px'},children:currentLesson.palavras.map((palavra,index)=>{const status=wordStatuses[palavra.palavra_hebraica]||'default';let backgroundColor='#f0f0f0';if(status==='correct')backgroundColor='#d4edda';else if(status==='incorrect')backgroundColor='#f8d7da';return/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleWordClick(palavra),disabled:status!=='default',style:{padding:'15px',border:'none',borderRadius:'5px',backgroundColor,cursor:status==='default'?'pointer':'not-allowed',fontSize:'1.1em',fontWeight:'bold',transition:'background-color 0.3s ease'},children:palavra.palavra_hebraica},index);})}),isChallengeComplete&&/*#__PURE__*/_jsx(\"div\",{style:{textAlign:'center',marginTop:'25px'},children:/*#__PURE__*/_jsx(\"button\",{onClick:handleNextRoot,style:{padding:'10px 20px',fontSize:'1em'},children:\"Pr\\xF3xima Raiz\"})})]});};export default RootConnectorExercise;","map":{"version":3,"names":["React","useState","useMemo","useEffect","jsx","_jsx","jsxs","_jsxs","RootConnectorExercise","_ref","currentLesson","uniqueRoots","palavras","roots","map","p","raiz_shoresh","filter","r","Set","currentRootIndex","setCurrentRootIndex","wordStatuses","setWordStatuses","correctlyGuessed","setCorrectlyGuessed","targetRoot","totalWordsForThisRoot","length","handleWordClick","palavra","palavra_hebraica","isCorrect","status","prev","add","handleNextRoot","prevIndex","isChallengeComplete","size","areAllChallengesDone","children","style","padding","textAlign","border","borderRadius","marginBottom","fontSize","color","display","gridTemplateColumns","gap","marginTop","index","backgroundColor","onClick","disabled","cursor","fontWeight","transition"],"sources":["C:/PROJETOS/mare-cli/src/RootConnectorExercise.js"],"sourcesContent":["import React, { useState, useMemo, useEffect } from 'react';\n\nconst RootConnectorExercise = ({ currentLesson }) => {\n  // 1. Encontra todas as raízes únicas e não nulas e as armazena.\n  const uniqueRoots = useMemo(() => {\n    if (!currentLesson || !currentLesson.palavras) return [];\n    const roots = currentLesson.palavras\n      .map(p => p.raiz_shoresh)\n      .filter(r => r); // Filtra raízes nulas ou vazias\n    return [...new Set(roots)]; // Cria um array de raízes únicas\n  }, [currentLesson]);\n\n  // 2. Gerencia o estado do desafio atual.\n  const [currentRootIndex, setCurrentRootIndex] = useState(0);\n  const [wordStatuses, setWordStatuses] = useState({});\n  const [correctlyGuessed, setCorrectlyGuessed] = useState(new Set());\n\n  const targetRoot = uniqueRoots[currentRootIndex];\n  const totalWordsForThisRoot = useMemo(() => \n    currentLesson.palavras.filter(p => p.raiz_shoresh === targetRoot).length,\n    [targetRoot, currentLesson.palavras]\n  );\n\n  // Reseta o estado quando a raiz alvo muda.\n  useEffect(() => {\n    setWordStatuses({});\n    setCorrectlyGuessed(new Set());\n  }, [currentRootIndex]);\n\n  const handleWordClick = (palavra) => {\n    // Não faz nada se a palavra já foi marcada.\n    if (wordStatuses[palavra.palavra_hebraica]) return;\n\n    const isCorrect = palavra.raiz_shoresh === targetRoot;\n    const status = isCorrect ? 'correct' : 'incorrect';\n\n    setWordStatuses(prev => ({ ...prev, [palavra.palavra_hebraica]: status }));\n\n    if (isCorrect) {\n      setCorrectlyGuessed(prev => new Set(prev).add(palavra.palavra_hebraica));\n    }\n  };\n\n  const handleNextRoot = () => {\n    if (currentRootIndex < uniqueRoots.length - 1) {\n      setCurrentRootIndex(prevIndex => prevIndex + 1);\n    }\n  };\n\n  const isChallengeComplete = correctlyGuessed.size === totalWordsForThisRoot;\n  const areAllChallengesDone = currentRootIndex >= uniqueRoots.length - 1 && isChallengeComplete;\n\n  if (uniqueRoots.length === 0) {\n    return <p>Não há raízes para este exercício.</p>;\n  }\n\n  // 6. Tela de conclusão.\n  if (areAllChallengesDone) {\n    return (\n      <div style={{ padding: '20px', textAlign: 'center' }}>\n        <h3>Parabéns!</h3>\n        <p>Você completou todos os desafios de conexão de raiz.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ padding: '20px', border: '1px solid #eee', borderRadius: '8px' }}>\n      <h3 style={{ textAlign: 'center', marginBottom: '25px' }}>\n        Exercício: Conecte as Palavras ({currentRootIndex + 1}/{uniqueRoots.length})\n      </h3>\n      <p style={{ textAlign: 'center', fontSize: '1.2em' }}>\n        Clique nas palavras que pertencem à raiz: <strong style={{ fontSize: '1.5em', color: '#005a9e' }}>{targetRoot}</strong>\n      </p>\n      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(100px, 1fr))', gap: '15px', marginTop: '20px' }}>\n        {currentLesson.palavras.map((palavra, index) => {\n          const status = wordStatuses[palavra.palavra_hebraica] || 'default';\n          let backgroundColor = '#f0f0f0';\n          if (status === 'correct') backgroundColor = '#d4edda';\n          else if (status === 'incorrect') backgroundColor = '#f8d7da';\n\n          return (\n            <button\n              key={index}\n              onClick={() => handleWordClick(palavra)}\n              disabled={status !== 'default'}\n              style={{\n                padding: '15px',\n                border: 'none',\n                borderRadius: '5px',\n                backgroundColor,\n                cursor: status === 'default' ? 'pointer' : 'not-allowed',\n                fontSize: '1.1em',\n                fontWeight: 'bold',\n                transition: 'background-color 0.3s ease'\n              }}\n            >\n              {palavra.palavra_hebraica}\n            </button>\n          );\n        })}\n      </div>\n      {/* 4. Botão \"Próxima Raiz\" */}\n      {isChallengeComplete && (\n        <div style={{ textAlign: 'center', marginTop: '25px' }}>\n          <button onClick={handleNextRoot} style={{ padding: '10px 20px', fontSize: '1em' }}>\n            Próxima Raiz\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default RootConnectorExercise;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}