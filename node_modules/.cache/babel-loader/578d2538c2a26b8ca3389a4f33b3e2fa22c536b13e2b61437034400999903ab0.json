{"ast":null,"code":"var _jsxFileName = \"C:\\\\PROJETOS\\\\mare-cli\\\\src\\\\RootConnectorExercise.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RootConnectorExercise = ({\n  currentLesson\n}) => {\n  _s();\n  // Encontra a primeira raiz única para o exercício\n  const targetRoot = useMemo(() => {\n    if (!currentLesson || !currentLesson.palavras) return null;\n    const roots = new Set(currentLesson.palavras.map(p => p.raiz_shoresh));\n    return roots.values().next().value;\n  }, [currentLesson]);\n\n  // Estado para rastrear o status de cada palavra (default, correct, incorrect)\n  const [wordStatuses, setWordStatuses] = useState({});\n  const handleWordClick = palavra => {\n    const status = palavra.raiz_shoresh === targetRoot ? 'correct' : 'incorrect';\n    setWordStatuses(prevStatuses => ({\n      ...prevStatuses,\n      [palavra.palavra_hebraica]: status\n    }));\n  };\n  if (!targetRoot) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"N\\xE3o foi poss\\xEDvel carregar o exerc\\xEDcio.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      border: '1px solid #eee',\n      borderRadius: '8px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        textAlign: 'center',\n        marginBottom: '25px'\n      },\n      children: \"Exerc\\xEDcio: Conecte as Palavras\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        textAlign: 'center',\n        fontSize: '1.2em'\n      },\n      children: [\"Clique nas palavras que pertencem \\xE0 raiz: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        style: {\n          fontSize: '1.5em',\n          color: '#005a9e'\n        },\n        children: targetRoot\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 51\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: 'repeat(auto-fill, minmax(100px, 1fr))',\n        gap: '15px',\n        marginTop: '20px'\n      },\n      children: currentLesson.palavras.map((palavra, index) => {\n        const status = wordStatuses[palavra.palavra_hebraica] || 'default';\n        let backgroundColor = '#f0f0f0'; // Cor padrão\n        if (status === 'correct') {\n          backgroundColor = '#d4edda'; // Verde para correto\n        } else if (status === 'incorrect') {\n          backgroundColor = '#f8d7da'; // Vermelho para incorreto\n        }\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleWordClick(palavra),\n          style: {\n            padding: '15px',\n            border: 'none',\n            borderRadius: '5px',\n            backgroundColor: backgroundColor,\n            cursor: 'pointer',\n            fontSize: '1.1em',\n            fontWeight: 'bold',\n            transition: 'background-color 0.3s ease'\n          },\n          children: palavra.palavra_hebraica\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(RootConnectorExercise, \"6CjqvWF8DsKSPn1jSXaa1j9AO/Q=\");\n_c = RootConnectorExercise;\nexport default RootConnectorExercise;\nvar _c;\n$RefreshReg$(_c, \"RootConnectorExercise\");","map":{"version":3,"names":["React","useState","useMemo","jsxDEV","_jsxDEV","RootConnectorExercise","currentLesson","_s","targetRoot","palavras","roots","Set","map","p","raiz_shoresh","values","next","value","wordStatuses","setWordStatuses","handleWordClick","palavra","status","prevStatuses","palavra_hebraica","children","fileName","_jsxFileName","lineNumber","columnNumber","style","padding","border","borderRadius","textAlign","marginBottom","fontSize","color","display","gridTemplateColumns","gap","marginTop","index","backgroundColor","onClick","cursor","fontWeight","transition","_c","$RefreshReg$"],"sources":["C:/PROJETOS/mare-cli/src/RootConnectorExercise.js"],"sourcesContent":["import React, { useState, useMemo } from 'react';\n\nconst RootConnectorExercise = ({ currentLesson }) => {\n  // Encontra a primeira raiz única para o exercício\n  const targetRoot = useMemo(() => {\n    if (!currentLesson || !currentLesson.palavras) return null;\n    const roots = new Set(currentLesson.palavras.map(p => p.raiz_shoresh));\n    return roots.values().next().value;\n  }, [currentLesson]);\n\n  // Estado para rastrear o status de cada palavra (default, correct, incorrect)\n  const [wordStatuses, setWordStatuses] = useState({});\n\n  const handleWordClick = (palavra) => {\n    const status = palavra.raiz_shoresh === targetRoot ? 'correct' : 'incorrect';\n    setWordStatuses(prevStatuses => ({\n      ...prevStatuses,\n      [palavra.palavra_hebraica]: status\n    }));\n  };\n\n  if (!targetRoot) {\n    return <p>Não foi possível carregar o exercício.</p>;\n  }\n\n  return (\n    <div style={{ padding: '20px', border: '1px solid #eee', borderRadius: '8px' }}>\n      <h3 style={{ textAlign: 'center', marginBottom: '25px' }}>Exercício: Conecte as Palavras</h3>\n      <p style={{ textAlign: 'center', fontSize: '1.2em' }}>\n        Clique nas palavras que pertencem à raiz: <strong style={{ fontSize: '1.5em', color: '#005a9e' }}>{targetRoot}</strong>\n      </p>\n      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(100px, 1fr))', gap: '15px', marginTop: '20px' }}>\n        {currentLesson.palavras.map((palavra, index) => {\n          const status = wordStatuses[palavra.palavra_hebraica] || 'default';\n          let backgroundColor = '#f0f0f0'; // Cor padrão\n          if (status === 'correct') {\n            backgroundColor = '#d4edda'; // Verde para correto\n          } else if (status === 'incorrect') {\n            backgroundColor = '#f8d7da'; // Vermelho para incorreto\n          }\n\n          return (\n            <button\n              key={index}\n              onClick={() => handleWordClick(palavra)}\n              style={{\n                padding: '15px',\n                border: 'none',\n                borderRadius: '5px',\n                backgroundColor: backgroundColor,\n                cursor: 'pointer',\n                fontSize: '1.1em',\n                fontWeight: 'bold',\n                transition: 'background-color 0.3s ease'\n              }}\n            >\n              {palavra.palavra_hebraica}\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default RootConnectorExercise;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}